 Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]





class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        if n == 0: 
            return ['']
        res = []
        def backtrack(brac = '', left = 0, right = 0):
            if len(brac) == 2 * n:
                res.append(brac)
                return
            if left < n:
                backtrack(brac+'(', left+1, right)
            if right < left:
                backtrack(brac+')', left, right+1)

        backtrack()
        return res
        
